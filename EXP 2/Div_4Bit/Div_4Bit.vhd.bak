library ieee;
use ieee.std_logic_1164.all;
entity Div_4Bit is
generic(
N : integer:=4; -- operand width
NN : integer:=8 -- result width
);
port (
Nu: in std_logic_vector(N-1 downto 0);-- Nu (read numerator) is dividend
D: in std_logic_vector(N-1 downto 0);-- D (read Denominator) is divisor
RQ: out std_logic_vector((NN)-1 downto 0)--upper N bits of RQ will have remainder and
--lower N bits will have quotient
) ;
end Div_4Bit ;
architecture beh of Div_4Bit is
-- unconstrained 1D x 1D array
type pr_type is array (natural range<>) of std_logic_vector(NN-1 downto 0);
type prp_type is array (natural range<>) of std_logic_vector(NN-2 downto 0);
-- subtractor function. [Usage: var := sub(X,Y) where var is a variable
-- and X,Y are two 4-bit inputs for subtractor]
function sub(A: in std_logic_vector; B: in std_logic_vector)
return std_logic_vector is
-- variable declaration
variable W : integer := A'length;
variable diff : std_logic_vector(W downto 0):= (others=>'0');
variable borrow : std_logic_vector(W downto 0):= (0 => '1', others=>'0');
variable B_sign: std_logic_vector(A'length-1 downto 0):=(others=>'0');
begin
B_sign(B'length-1 downto 0) := not B;
for i in 0 to W-1 loop
diff(i) := A(i) xor B_sign(i) xor borrow(i);
borrow(i+1) := (A(i) and B_sign(i)) or (borrow(i) and (A(i) xor B_sign(i)));
end loop;
diff(W) := not borrow(W);
return diff;
end sub;
begin
division : process(Nu, D)
-- Here Nu (read numerator) is dividend and D (read denominator) is divisor
-- variable k holds length of dividend
variable k : integer := Nu'length;
variable pr : pr_type(0 to 4) := (others => (others =>'0'));
variable prp : prp_type(0 to 4) := (others => (others =>'0'));
variable s:std_logic_vector(4 downto 0) :=(others=>'0') ;
variable dif:std_logic_vector(3 downto 0) :=(others=>'0') ;
begin
pr(0)(3 downto 0):=Nu;
for i in 0 to 3 loop
for j in 0 to 6 loop
prp(i)(j):=pr(i)(j);
end loop;
dif:=prp(i)(6 downto 3);
s:=sub(dif,D);
if s(4)='1' then
pr(i+1)(7 downto 1):=prp(i);
pr(i+1)(0):='0';
end if;
if s(4)='0' then
pr(i+1)(7 downto 4):=s(3 downto 0);
pr(i+1)(3 downto 1):=prp(i)(2 downto 0);
pr(i+1)(0):='1';
end if;
end loop;
RQ <=pr(4);
end process ; -- division
end beh ; -- beh